//
// This is a modified version of the simple_perf example SystemC model
//

#include <omnetpp.h>
#include <systemc>

using namespace omnetpp;

using namespace ::sc_core;
using namespace ::std;
////////////////////////******** RISC-V addition *********** //////////////////////////////////

// Adding necessary libraries and header files to create riscv vp module
#include <cstdlib>
#include <ctime>
#include <boost/io/ios_state.hpp>
#include <boost/program_options.hpp>
#include <iomanip>
#include <iostream>

#include "include_vp/common/gdb_server.h"
#include "include_vp/common/gdb_runner.h"

#include "include_vp/common/clint.h"
#include "include_vp/rv32/elf_loader.h"
#include "include_vp/common/gdb_stub.h"
#include "include_vp/rv32/iss.h"
#include "include_vp/rv32/mem.h"
#include "include_vp/memory.h"
#include "include_vp/rv32/syscall.h"

using namespace rv32;

struct Options {
    typedef unsigned int addr_t;

    Options &check_and_post_process() {
        mem_end_addr = mem_start_addr + mem_size - 1;
        return *this;
    }

    std::string input_program = "/home/ahmed/Desktop/Work_Productive_4.0/omnetpp-5.4.1/samples/riscv_vp/example";

    addr_t mem_size = 1024 * 1024 * 32;  // 32 MB ram, to place it before the CLINT and run the base examples (assume
                                         // memory start at zero) without modifications
    addr_t mem_start_addr = 0x00000000;
    addr_t mem_end_addr = mem_start_addr + mem_size - 1;
    addr_t clint_start_addr = 0x02000000;
    addr_t clint_end_addr = 0x0200ffff;
    addr_t sys_start_addr = 0x02010000;
    addr_t sys_end_addr = 0x020103ff;

    bool use_debug_runner = false;
    bool use_instr_dmi = false;
    bool use_data_dmi = false;
    bool trace_mode = false;
    bool intercept_syscalls = false; //true
    bool quiet = false;
    bool use_E_base_isa = false;
    unsigned int debug_port = 5005;

    unsigned int tlm_global_quantum = 10;
};

/// with  async_attach_suspending(); commented

////////////////////////****************** ******************* //////////////////////////////////
class write_if : virtual public sc_interface
{
  public:
    virtual void write(char) = 0;
    virtual void reset() = 0;
};

class read_if : virtual public sc_interface
{
  public:
    virtual void read(char &) = 0;
    virtual int num_available() = 0;
};

class fifo : public sc_channel, public write_if, public read_if
{
  public:
    fifo(sc_module_name name, int size_) : sc_channel(name), size(size_)
    {
      data = new char[size];
      num_elements = first = 0;
      num_read = max_used = average = 0;
      last_time = SC_ZERO_TIME;
    }

    ~fifo()
    {
      delete[] data;

      cout << endl << "Fifo size is: " << size << endl;
      cout << "Average fifo fill depth: " << double(average) / num_read << endl;
      cout << "Maximum fifo fill depth: " << max_used << endl;
      cout << "Average transfer time per character: "
           << last_time / num_read << endl;
      cout << "Total characters transferred: " << num_read << endl;
      cout << "Total time: " << last_time << endl;
    }

    void write(char c) {
      if (num_elements == size)
        wait(read_event);

      data[(first + num_elements) % size] = c;
      ++ num_elements;
      write_event.notify();
    }

    void read(char &c){
      last_time = sc_time_stamp();
      if (num_elements == 0)
        wait(write_event);

      compute_stats();

      c = data[first];
      -- num_elements;
      first = (first + 1) % size;
      read_event.notify();
    }

    void reset() { num_elements = first = 0; }

    int num_available() { return num_elements;}

  private:
    char *data;
    int num_elements, first;
    sc_event write_event, read_event;
    int size, num_read, max_used, average;
    sc_time last_time;

    void compute_stats()
    {
      average += num_elements;

      if (num_elements > max_used)
         max_used = num_elements;

      ++num_read;
    }
};

class producer : public sc_module
{
  public:
    sc_port<write_if> out;
    cSimpleModule *omnetpp_parent; //Andras
    sc_event kick_event;  //Andras

    SC_HAS_PROCESS(producer);

    producer(sc_module_name name, cSimpleModule *parent) : sc_module(name), omnetpp_parent(parent) // added 2nd arg --Andras
    {
      SC_THREAD(main);
    }

    void main()
    {

        Options opt ; //= parse_command_line_arguments(argc, argv);

            std::srand(std::time(nullptr));  // use current time as seed for random generator

            tlm::tlm_global_quantum::instance().set(sc_core::sc_time(opt.tlm_global_quantum, sc_core::SC_NS));

            ISS core(0, opt.use_E_base_isa);
            MMU mmu(core);
            CombinedMemoryInterface core_mem_if("MemoryInterface0", core, &mmu);
            SimpleMemory mem("SimpleMemory", opt.mem_size);
            ELFLoader loader(opt.input_program.c_str());
            SimpleBus<2, 3> bus("SimpleBus");
            SyscallHandler sys("SyscallHandler");
            CLINT<1> clint("CLINT");
            DebugMemoryInterface dbg_if("DebugMemoryInterface");

            MemoryDMI dmi = MemoryDMI::create_start_size_mapping(mem.data, opt.mem_start_addr, mem.size);
            InstrMemoryProxy instr_mem(dmi, core);

            std::shared_ptr<BusLock> bus_lock = std::make_shared<BusLock>();
            core_mem_if.bus_lock = bus_lock;

            instr_memory_if *instr_mem_if = &core_mem_if;
            data_memory_if *data_mem_if = &core_mem_if;
            if (opt.use_instr_dmi)
                instr_mem_if = &instr_mem;
            if (opt.use_data_dmi) {
                core_mem_if.dmi_ranges.emplace_back(dmi);
            }

            loader.load_executable_image(mem.data, mem.size, opt.mem_start_addr);
            core.init(instr_mem_if, data_mem_if, &clint, loader.get_entrypoint(), rv32_align_address(opt.mem_end_addr));
            sys.init(mem.data, opt.mem_start_addr, loader.get_heap_addr());
            sys.register_core(&core);

            if (opt.intercept_syscalls)
                core.sys = &sys;

            // setup port mapping
            bus.ports[0] = new PortMapping(opt.mem_start_addr, opt.mem_end_addr);
            bus.ports[1] = new PortMapping(opt.clint_start_addr, opt.clint_end_addr);
            bus.ports[2] = new PortMapping(opt.sys_start_addr, opt.sys_end_addr);

            // connect TLM sockets
            core_mem_if.isock.bind(bus.tsocks[0]);
            dbg_if.isock.bind(bus.tsocks[1]);
            bus.isocks[0].bind(mem.tsock);
            bus.isocks[1].bind(clint.tsock);
            bus.isocks[2].bind(sys.tsock);

            // connect interrupt signals/communication
            clint.target_harts[0] = &core;

            // switch for printing instructions
            core.trace = opt.trace_mode;

            std::vector<debug_target_if *> threads;
            threads.push_back(&core);

            if (opt.use_debug_runner) {
                auto server = new GDBServer("GDBServer", threads, &dbg_if, opt.debug_port);
                new GDBServerRunner("GDBRunner", server, &core);
            } else {
                new DirectCoreRunner(core);
            }

            if (opt.quiet)
                 sc_core::sc_report_handler::set_verbosity_level(sc_core::SC_NONE);

            //sc_core::sc_start();
            if (!opt.quiet) {
                core.show();
            }

            //return 0;

    }

    void kick() //Andras
    {
      kick_event.notify();
    }
};

class consumer : public sc_module
{
  public:
    sc_port<read_if> in;
    cSimpleModule *omnetpp_parent; //Andras

    SC_HAS_PROCESS(consumer);

    consumer(sc_module_name name, cSimpleModule *parent) : sc_module(name), omnetpp_parent(parent) // added 2nd arg --Andras
    {
      SC_THREAD(main);
    }

    void main()
    {
      char c;

      while (true) {
        in->read(c);

        char msg_name[] = { c, 0 };  //Andras (added 4 lines)
        cContextSwitcher dummy(omnetpp_parent);
        EV << "consumer: read " << c << ", sending it in a msg\n";
        omnetpp_parent->send(new cMessage(msg_name), "out");

        wait(100, SC_NS);
      }
    }
};

class top : public sc_module
{
  public:
    fifo fifo_inst;
    producer prod_inst;
    consumer cons_inst;

    top(sc_module_name name, int size, cSimpleModule *omnetpp_parent) : // added 3rd arg --Andras
        sc_module(name) ,
       fifo_inst("Fifo1", size),
        prod_inst("Producer1", omnetpp_parent),
        cons_inst("Consumer1", omnetpp_parent)
    {
     prod_inst.out(fifo_inst);
     cons_inst.in(fifo_inst);
    }
};

/**
 * OMNeT++ module to wrap the SystemC model
 */
class SC_Riscv : public cSimpleModule
{
   protected:
     top top_inst;

   public:
     SC_Riscv() : top_inst("top", 3, this) {}  // use a very small buffer (size=3)

     void handleMessage(cMessage *msg)
     {
       delete msg;
       EV << "kicking producer...\n";
       top_inst.prod_inst.kick();
     }
};

Define_Module(SC_Riscv);
